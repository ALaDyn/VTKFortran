/**
@page VTR RectilinearGrid Topology Example

@page VTS StructuredGrid Topology Example

This example demonstrate the creation of StructuredGrid file (.vts). The mesh is a simple prism.

Let us assume that all the necessary StructuredGrid variables have been defined and initialized, the following is a pseudo code
showing how to create XML file:

  - file initialization:
    @code
      E_IO = VTK_INI_XML(output_format='binary', filename='XML_STRG.vts', &
                         mesh_topology='StructuredGrid', nx1=nx1, nx2=nx2, ny1=ny1, ny2=ny2, nz1=nz1, nz2=nz2)
    @endcode
  - global auxiliary data saving:
    @code
      E_IO = VTK_FLD_XML(fld_action='open')
      E_IO = VTK_FLD_XML(fld=0._R8P,fname='TIME')
      E_IO = VTK_FLD_XML(fld=1_I8P,fname='CYCLE')
      E_IO = VTK_FLD_XML(fld_action='close')
    @endcode
  - mesh saving of the first (unique) piece:
    @code
      E_IO = VTK_GEO_XML(nx1=nx1, nx2=nx2, ny1=ny1, ny2=ny2, nz1=nz1, nz2=nz2, NN=nn, &
                         X=reshape(x(nx1:nx2,:,:),(/nn/)),                            &
                         Y=reshape(y(nx1:nx2,:,:),(/nn/)),                            &
                         Z=reshape(z(nx1:nx2,:,:),(/nn/)))
    @endcode
  - initializing the file tag data-container for saving data associated to the current piece:
    @code
      E_IO = VTK_DAT_XML(var_location = 'node', var_block_action = 'open')
    @endcode
  - data saving:
    @code
      E_IO = VTK_VAR_XML(NC_NN = nn, varname = 'node_value', var = reshape(v(nx1:nx2,:,:),(/nn/)))
    @endcode
  - closing the file tag data-container:
    @code
      E_IO = VTK_DAT_XML(var_location = 'node', var_block_action = 'close')
    @endcode
  - closing current piece:
    @code
      E_IO = VTK_GEO_XML()
    @endcode
  - file finalization:
    @code
      E_IO = VTK_END_XML()
    @endcode

This example is contained into Test_Driver.f90, in particular the subroutine \ref Lib_Testers::test_strg "test_strg" contains all the data and code to run this
example.

@page VTU UnstructuredGrid Topology Example

This example demonstrate the creation of UnstructuredGrid file (.vtu). The mesh is composed by 11 elements of different types with
a total of 27 nodes coordinates.

Let us assume that all the necessary UnstructuredGrid variables have been defined and initialized, the following is a pseudo code
showing how to create XML file:

  - file initialization:
    @code
      E_IO = VTK_INI_XML(output_format = 'Binary', filename = 'XML_UNST.vtu', mesh_topology = 'UnstructuredGrid')
    @endcode
  - mesh saving of the first (unique) piece:
    @code
      E_IO = VTK_GEO_XML(NN = Nn, NC = Ne, X = x, Y = y, Z = z)
    @endcode
  - mesh connectivity saving of the first (unique) piece:
    @code
      E_IO = VTK_CON_XML(NC = Ne, connect = connect, offset = offset, cell_type = cell_type )
    @endcode
  - initializing the file tag data-container for saving data associated to the current piece:
    @code
      E_IO = VTK_DAT_XML(var_location = 'node', var_block_action = 'open')
    @endcode
  - data saving:
    @code
      E_IO = VTK_VAR_XML(NC_NN = Nn, varname = 'scalars', var = v)
      E_IO = VTK_VAR_XML(NC_NN = Nn, varname = 'vector', varX=v_X,varY=v_Y,varZ=v_Z)
    @endcode
  - closing the file tag data-container:
    @code
      E_IO = VTK_DAT_XML(var_location = 'node', var_block_action = 'close')
    @endcode
  - closing current piece:
    @code
      E_IO = VTK_GEO_XML()
    @endcode
  - file finalization:
    @code
      E_IO = VTK_END_XML()
    @endcode

This example is contained into Test_Driver.f90, in particular the subroutine \ref Lib_Testers::test_strg "test_unst" contains all the data and code to run this
example.

@page PVTR PRectilinearGrid Topology Example

@page PVTS PStructuredGrid Topology Example

This example demonstrate the creation of parallel (partitioned) PStructuredGrid file (.pvts). The mesh is a simple prism partitioned into two
pieces along x direction.The extent of the whole dataset is \f$[nx1-nx2,ny1-ny2,nz1-nz2]\f$ and the ordinate x is partitioned as

\f$ nx1_p[1]=nx1 \f$

\f$ nx1_p[2]=nx12 \f$

\f$ nx2_p[1]=nx12 \f$

\f$ nx2_p[2]=nx2 \f$

where \f$nx12\f$ is the ordinate where the prism has been partitioned. The following is a schematic 2D draw of the partitioned
prism.

@code
y ^
  |               ny2 +-----------------+--------------+
  |                   |                 |              |
  |                   |                 |              |
  |                   |                 |              |
  |                   |                 |              |
  o-------->      ny1 +-----------------+--------------+
           x         nx1               i=nx2_p(1)     nx2
@endcode

Let us assume that all the necessary StructuredGrid variables have been defined and initialized, the following is a pseudo code
showing how to create partitioned files:

  - files initialization:
    @code
      do p=1,2 ! loop over pieces
        E_IO = VTK_INI_XML(cf=mf(p),output_format='binary', filename='XML_STRG_part'//trim(str(.true.,p-1))//'.vts', &
                           mesh_topology='StructuredGrid', nx1=nx1_p(p), nx2=nx2_p(p), ny1=ny1, ny2=ny2, nz1=nz1, nz2=nz2)
      enddo
    @endcode
  - partitioned data saving:
    @code
      do p=1,2 ! loop over pieces
        E_IO = VTK_GEO_XML(cf=mf(p),nx1=nx1_p(p), nx2=nx2_p(p), ny1=ny1, ny2=ny2, nz1=nz1, nz2=nz2, NN=nn_p(p), &
                           X=reshape(x(nx1_p(p):nx2_p(p),:,:),(/nn_p(p)/)),                                     &
                           Y=reshape(y(nx1_p(p):nx2_p(p),:,:),(/nn_p(p)/)),                                     &
                           Z=reshape(z(nx1_p(p):nx2_p(p),:,:),(/nn_p(p)/)))
        E_IO = VTK_DAT_XML(cf=mf(p),var_location = 'node', var_block_action = 'open')
        E_IO = VTK_VAR_XML(cf=mf(p),NC_NN = nn_p(p), varname = 'node_value', var = reshape(v(nx1_p(p):nx2_p(p),:,:),(/nn_p(p)/)))
        E_IO = VTK_DAT_XML(cf=mf(p),var_location = 'node', var_block_action = 'close')
        E_IO = VTK_GEO_XML(cf=mf(p))
      enddo
    @endcode
  - files finalization:
    @code
      do p=1,2 ! loop over pieces
        E_IO = VTK_END_XML()
      enddo
    @endcode
  - parallel StructuredGrid file creation:
    @code
      E_IO = PVTK_INI_XML(filename = 'XML_STRG.pvts', mesh_topology = 'PStructuredGrid', &
                          nx1=nx1,      nx2=nx2,      ny1=ny1, ny2=ny2, nz1=nz1, nz2=nz2, tp='Float64')
      E_IO = PVTK_GEO_XML(nx1=nx1,      nx2=nx2_p(1), ny1=ny1, ny2=ny2, nz1=nz1, nz2=nz2, source='XML_STRG_part0.vts')
      E_IO = PVTK_GEO_XML(nx1=nx2_p(1), nx2=nx2_p(2), ny1=ny1, ny2=ny2, nz1=nz1, nz2=nz2, source='XML_STRG_part1.vts')
      E_IO = PVTK_DAT_XML(var_location = 'node', var_block_action = 'open')
      E_IO = PVTK_VAR_XML(varname = 'node_value', tp='Int32')
      E_IO = PVTK_DAT_XML(var_location = 'node', var_block_action = 'close')
      E_IO = PVTK_END_XML()
    @endcode

This example is contained into Test_Driver.f90, in particular the subroutine \ref Lib_Testers::test_pstrg "test_pstrg" contains all the data and code to run this
example.

@note \b Pieces \b Extents \n
It is worth noting the relation between pieces extents. The pieces must be "adjacent" meaning that they must share the "patch" where
they have been partitioned, i.e.  \f$ nx1_p[2]=nx12 = nx2_p[1] \f$. This is necessary at least for a proper visualization with
ParaView, but it is not clear (for the authors) if it is a requirements of VTK standard.

@page PVTU PUnstructuredGrid Topology Example

This example demonstrate the creation of parallel (partitioned) PUnstructuredGrid file (.pvtu). The mesh is composed by two
independent UnstructuredGrid dataset that are identical.

Let us assume that all the necessary UnstructuredGrid variables have been defined and initialized, the following is a pseudo code
showing how to create partitioned files:

  - first piece:
    @code
      E_IO = VTK_INI_XML(output_format = 'Binary', filename = 'XML_UNST_part0.vtu', mesh_topology = 'UnstructuredGrid')
      E_IO = VTK_GEO_XML(NN = Nn, NC = Ne, X = x, Y = y, Z = z)
      E_IO = VTK_CON_XML(NC = Ne, connect = connect, offset = offset, cell_type = cell_type )
      E_IO = VTK_DAT_XML(var_location = 'node', var_block_action = 'opeN')
      E_IO = VTK_VAR_XML(NC_NN = Nn, varname = 'scalars', var = v)
      E_IO = VTK_VAR_XML(NC_NN = Nn, varname = 'vector', varX=v_X,varY=v_Y,varZ=v_Z)
      E_IO = VTK_DAT_XML(var_location = 'node', var_block_action = 'CLOSE')
      E_IO = VTK_GEO_XML()
      E_IO = VTK_END_XML()
    @endcode
  - second piece:
    @code
      x = x + 10._R4P
      E_IO = VTK_INI_XML(output_format = 'Binary', filename = 'XML_UNST_part1.vtu', mesh_topology = 'UnstructuredGrid')
      E_IO = VTK_GEO_XML(NN = Nn, NC = Ne, X = x, Y = y, Z = z)
      E_IO = VTK_CON_XML(NC = Ne, connect = connect, offset = offset, cell_type = cell_type )
      E_IO = VTK_DAT_XML(var_location = 'node', var_block_action = 'opeN')
      E_IO = VTK_VAR_XML(NC_NN = Nn, varname = 'scalars', var = v)
      E_IO = VTK_VAR_XML(NC_NN = Nn, varname = 'vector', varX=v_X,varY=v_Y,varZ=v_Z)
      E_IO = VTK_DAT_XML(var_location = 'node', var_block_action = 'CLOSE')
      E_IO = VTK_GEO_XML()
      E_IO = VTK_END_XML()
    @endcode
  - parallel PUnstructuredGrid file creation:
    @code
      E_IO = PVTK_INI_XML(filename = 'XML_UNST.pvtu', mesh_topology = 'PUnstructuredGrid', tp='Float32')
      E_IO = PVTK_GEO_XML(source='XML_UNST_part0.vtu')
      E_IO = PVTK_GEO_XML(source='XML_UNST_part1.vtu')
      E_IO = PVTK_DAT_XML(var_location = 'node', var_block_action = 'OPEN')
      E_IO = PVTK_VAR_XML(varname = 'scalars', tp='Float64')
      E_IO = PVTK_VAR_XML(Nc = 3, varname = 'vector', tp='Int32' )
      E_IO = PVTK_DAT_XML(var_location = 'node', var_block_action = 'Close')
      E_IO = PVTK_END_XML()
    @endcode

This example is contained into Test_Driver.f90, in particular the subroutine \ref Lib_Testers::test_punst "test_punst" contains all the data and code to run this
example.

@note \b GhostLevel \n
The PUnstructuredGrid pieces have the tag field GhostLevel. At present, it is not used.

@page VTM Multi-Blocks Dataset Example

This example demonstrate the creation of multi-block vtkMultiBlockDataSet (wrapper) file (.vtm). The mesh is composed by 4 subset of data organized into 2 blocks.
All the subsets are simple StructuredGrid prisms shifted along x direction.

Let us assume that all the necessary StructuredGrid variables have been defined and initialized, the following is a pseudo code
showing how to create multi-block file:

  - vts files creation:
    @code
      do b=1,4 ! loop over blocks
        E_IO = VTK_INI_XML(cf=mf(b),output_format='binary', filename='XML_M-STRG_part.'//trim(str(.true.,b-1))//'.vts', &
                           mesh_topology='StructuredGrid', nx1=nx1, nx2=nx2, ny1=ny1, ny2=ny2, nz1=nz1, nz2=nz2)
        if (b>1) then
          x = x + nx2*1._R8P
          v = b
        endif
        E_IO = VTK_GEO_XML(cf=mf(b),nx1=nx1, nx2=nx2, ny1=ny1, ny2=ny2, nz1=nz1, nz2=nz2, NN=nn, &
                           X=reshape(x(nx1:nx2,:,:),(/nn/)),                                     &
                           Y=reshape(y(nx1:nx2,:,:),(/nn/)),                                     &
                           Z=reshape(z(nx1:nx2,:,:),(/nn/)))
        E_IO = VTK_DAT_XML(cf=mf(b),var_location = 'node', var_block_action = 'open')
        E_IO = VTK_VAR_XML(cf=mf(b),NC_NN = nn, varname = 'node_value', var = reshape(v(nx1:nx2,:,:),(/nn/)))
        E_IO = VTK_DAT_XML(cf=mf(b),var_location = 'node', var_block_action = 'close')
        E_IO = VTK_GEO_XML(cf=mf(b))
        E_IO = VTK_END_XML()
      enddo
    @endcode
  - vtm file initialization:
    @code
      E_IO = VTM_INI_XML('XML_M-STRG.vtm')
    @endcode
  - saving the first block (2 vts subsets) files list:
    @code
      E_IO = VTM_BLK_XML(block_action='open')
      E_IO = VTM_WRF_XML(flist=(/('XML_M-STRG_part.'//trim(str(.true.,b-1))//'.vts',b=1,2)/))
      E_IO = VTM_BLK_XML(block_action='close')
    @endcode
  - saving the second block (2 vts subsets) files list:
    @code
      E_IO = VTM_BLK_XML(block_action='open')
      E_IO = VTM_WRF_XML(flist=(/('XML_M-STRG_part.'//trim(str(.true.,b-1))//'.vts',b=3,4)/))
      E_IO = VTM_BLK_XML(block_action='close')
    @endcode
  - file finalization:
    @code
      E_IO = VTM_END_XML()
    @endcode

This example is contained into Test_Driver.f90, in particular the subroutine \ref Lib_Testers::test_vtm "test_vtm" contains all the data and code to run this
example.

*/
