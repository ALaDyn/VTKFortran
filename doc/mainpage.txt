/**
@mainpage @libvtk

@author    Stefano Zaghi
@version   1.1
@date      2013-03-28
@par News
     - Added packed API and 3D arrays for VTK_GEO and VTK_GEO_XML function: this avoids the necessity of explicit reshape of
       multi-dimensional arrays containing X, Y and Z coordinates in GEO callings; the following inputs are now available:
          - StructuredGrid (NN is the number of grid points, n#1-n#2, #x,y,z are the domain extents):
               - 1D arrays of size NN: X[1:NN],Y[1:NN],Z[1:NN];
               - 3D arrays of size NN: X[nx1:nx2,ny1:ny2,nz1:nz2],Y[nx1:nx2,ny1:ny2,nz1:nz2],Z[nx1:nx2,ny1:ny2,nz1:nz2];
               - 1D array of size 3*NN (packed API): XYZ[1:3,1:NN];
               - 3D array of size 3*NN (packed API): XYZ[1:3,nx1:nx2,ny1:ny2,nz1:nz2].
          - UnStructuredGrid (NN is the number of grid points):
               - 1D arrays of size NN: X[1:NN],Y[1:NN],Z[1:NN];
               - 1D array of size 3*NN (packed API): XYZ[1:3,1:NN].
     - Added base64 encoding format: the output format specifier of VTK_INI_XML has been changed:
          - output_format = 'ascii' means \b ascii data, the same as the previous version;
          - output_format = 'binary' means \b base64 encoded data, different from the previous version where it meant appended
            raw-binary data; base64 encoding was missing in the previous version;
          - output_format = 'raw' means \b appended \b raw-binary data, as 'binary' of the previous version;
     - Added support for OpenMP multi-threads framework;
     - Correct bug affecting binary output;
     - implement concurrent multiple files IO capability;
     - implement FieldData tag for XML files, useful for tagging dataset with global auxiliary data, e.g. time, time step, ecc;
     - implement Parallel (Partitioned) XML files support (.pvtu,.pvts,.pvtr);
     - implement Driver testing program for providing practical examples of @libvtk usage.
     - added support for parallel framework, namely OpenMP (thread-safe) and MPI (process-safe).
@copyright GNU Public License version 3.

@note The supported compilers are GNU gfortran 4.7.x (or higher) and Intel Fortran 12.x (or higher). @libvtk needs a modern compiler providing support for some Fortran standard 2003 features.

@section Introduction

@libvtk is a Fortran library to write and read data conforming the VTK_Standard (http://www.vtk.org/), useful for ParaView visualization tool. Even though there are many wrappers/porting of the VTK source code (C++ code), there is not a Fortran one. This library is not a porting or a wrapper of the VTK code, but it only an exporter/importer of the VTK data format written in pure Fortran language (standard Fortran 2003) that can be used by Fortran coders (yes, there are still a lot of these brave coders...) without mixing Fortran with C++ language. Fortran is still the best language for high performance computing for scientific purpose, like CFD computing. It is necessary a tool to deal with VTK standard directly by Fortran code. The library was made to fill this empty: it is a simple Fortran module able to export native Fortran data into VTK data format and to import VTK data into a Fortran code, both in ascii and binary file format.

The library provides an automatic way to deal with VTK data format: all the formatting processes is nested into the library and users communicate with it by a simple API passing only native Fortran data (native Fortran scalar, vector and matrix).

The library is still in developing and testing, this is first usable release, but there are not all the features of the stable release (the importer is totally absent and the exporter is not complete). Surely there are a lot of bugs and the programming style is not the best, but the exporters are far-complete.

The supported VTK features are:
- Exporters:
  - Legacy standard:
    - Structured Points;
    - Structured Grid;
    - Unstructured Grid;
    - Polydata (\b missing);
    - Rectilinear Grid;
    - Field (\b missing);
  - XML standard:
    - serial dataset:
      - Image Data (\b missing);
      - Polydata (\b missing);
      - Rectilinear Grid;
      - Structured Grid;
      - Unstructured Grid;
    - parallel (partitioned) dataset:
      - Image Data (\b missing);
      - Polydata (\b missing);
      - Rectilinear Grid;
      - Structured Grid;
      - Unstructured Grid;
    - composite dataset:
      - vtkMultiBlockDataSet;
- Importers are \b missing.

@libvtk can handle multiple concurrent files and it is \b thread/processor-safe (meaning that can be safely used into parallel frameworks as OpenMP or MPI).

@subsection VTK_Standard
VTK, Visualization Toolkit, is an open source software that provides a powerful framework for the computer graphic, for the images processing and for 3D rendering. It is widely used in the world and so it has a very large community of users; besides the Kitware (The Kitware homepage can be found here: http://public.kitware.com) company provides professional support. The toolkit is written in C++ and a lot of porting/wrappers for Tcl/Tk, Java and Python are provided; unlucky there aren't wrappers for Fortran.

Because of its good features the VTK toolkit has been used to develop a large set of open source programs. For my work the most important family of programs is the scientific visualization programs. A lot of high-quality scientific visualization tool are available on the web but for me the best is ParaView: I think that it is one of the best scientific visualization program in the world and it is open source! Paraview is based on VTK.

@subsection ParaView
ParaView (The ParaView homepage can be found here: http://www.paraview.org) is an open source software voted to scientific visualization and able to use the power of parallel architectures. It has an architecture client-server in order to make easy the remote visualization of very large set of data. Because it is based on VTK it inherits all VTK features. ParaView is very useful for Computational Fluid Dynamics visualizations because it provides powerful post-processing tools; it provides a very large set of importers for the most used format like Plot3D and HDF (the list is very large). It is easy to extend ParaView because it supports all the scripting language supported by VTK.

@section Copyrights

The library is an open source project, it is distributed under the GPL v3. Anyone is interest to use, to develop or contribute to @libvtk is welcome.

@section Source-Code

It can be found at: https://github.com/szaghi/Lib_VTK_IO

@page Examples Examples of usage

The described examples are implemented in Test_Driver.f90 file into directory src. There are three types of examples:
 - \b serial XML outputs:
   - \subpage VTR;
   - \subpage VTS;
   - \subpage VTU.
 - \b parallel (partioned) XML outputs:
   - \subpage PVTR;
   - \subpage PVTS;
   - \subpage PVTU.
 - \b multi-blocks XML outputs:
   - \subpage VTM.

@page Compiling Compiling Instruction
@libvtk has been developed on GNU/Linux architectures. Other OS are not supported (and in general there is no best alternative to GNU/Linux :-).

The code provided have been successfully compiled with the following compilers:

- GNU gfortran (from version 4.7.0)
- Intel Fortran Compiler ifort (from version 12.0)

Other compilers are not supported.

@libvtk relies on IR_Precision module. The most easy way to compile @libvtk is to start with the provided makefile thus it is necessary that the system has "Make" program (preferably GNU make http://www.gnu.org/software/make/).

@section Makefile

The provided makefile has several options. It has one rule that prints all options available and the default settings. Typing in the shell prompt: @code make help @endcode the following output will be printed:

@code
 Make options of @libvtk code

 Compiler choice: COMPILER=gnu => default
  COMPILER=gnu   => GNU gfortran
  COMPILER=intel => Intel Fortran

 Compiling options
  SHARED=yes(no)   => on(off) shared library         (default no)
  DEBUG=yes(no)    => on(off) debug                  (default no)
  F03STD=yes(no)   => on(off) check standard fortran (default no)
  OPTIMIZE=yes(no) => on(off) optimization           (default no)
  OPENMP=yes(no)   => on(off) OpenMP directives      (default no)

 Preprocessing options
  R16P=yes(no) => on(off) definition of real with "128 bit" (default no)

 Provided Rules: default=Lib_VTK_IO => compile the library
  help         => printing this help message
  Lib_VTK_IO   => compile the library
  Test_Driver  => compile Test_Driver program
  cleanobj     => cleaning compiled object
  cleanmod     => cleaning .mod files
  cleanmsg     => cleaning make-log massage files
  cleanlib     => cleaning library
  clean        => running cleanobj, cleanmod and cleanmsg
  cleanall     => running clean and cleanexe
  tar          => creating a tar archive of the project
  doc          => building the documentation
@endcode

@subsection Mopts Makefile Options

The makefiles provides several options. These can be divided in make options (compiler choice and compiling options) and in pre-processing options. For the pre-processing options the C pre-process paradigm has been used.

The meaning of the options are:

- <b>Compiler choice:</b>
  - <b>COMPILER=gnu  </b> the codes is compiled using GNU gfortran compiler;
  - <b>COMPILER=intel</b> the codes is compiled using Intel Fortran compiler;
- <b>Compiling options:</b>
  - <b>DEBUG=yes(no)   </b> compilation with (or not) debug symbols;
  - <b>F03STD=yes(no)  </b> checking (or not) the compliance to Fortran standard 2003;
  - <b>OPTIMIZE=yes(no)</b> performance-optimized compilation (or not);
  - <b>OPENMP=yes(no)  </b> compilation with (or not) OpenMP directives;
- <b>Preprocessing options:</b>
  - <b>R16P=yes(no)</b> activation (or not) support for real with "128 bit" (quadruple precision) representation;

@subsection Mrules Makefile Rules

The makefiles provides several rules. Their meanings are:

- <b>help       </b>: print help message in the shell prompt providing informations about the options and the rules available;
- <b>Lib_VTK_IO </b>: build @libvtk library;
- <b>Test_Driver</b>: build Test_Driver program used for testing the library and for providing examples of usage;
- <b>cleanobj   </b>: clean compiled object file .o that are saved in obj directory by default;
- <b>cleanmod   </b>: clean modules files .mod that are saved in obj directory by default;
- <b>cleanmsg   </b>: clean log massage files of the make compilation that are "error_message" and "diagnostic_messages";
- <b>cleanlib   </b>: clean (remove) libary directory;
- <b>clean      </b>: execute cleanobj, cleanmod and cleanmsgr;
- <b>cleanall   </b>: execute clean and cleanexe;
- <b>tar        </b>: create a tar archive containing input lib util and src directories and makefile;
- <b>doc        </b>: build the documentation (by means doxygen) in the directory doc/html.

@note
In order to build the documentation the following dependences must be satisfied:
- .doxigenconfig file must be in project main directory;
- doc directory with doc/fpp.sh, doc/mainpage.txt, doc/examples.txt and doc/layout.xml files must be in project main directory;
- doxygen program must be installed (http://www.stack.nl/~dimitri/doxygen/).
All of the above pre-requisites are satisfied if the GitHub repository (https://github.com/szaghi/Lib_VTK_IO) is cloned. \n

*/
